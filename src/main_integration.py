#!/usr/bin/env python3
"""
main_extruder_integration.py

Integrate screw design, extruder motor sizing, and viscosity curve analysis.

Requirements:
- Python 3
- Files in same directory:
    • "extruder design.py" (screw_motor_calc function)
    • "screw_design.py"
    • "viscosity_curve_v3.py"

This script will:
  1. Load the screw_design module to compute screw geometry and throughput.
  2. Dynamically load "extruder design.py" to call screw_motor_calc() with the throughput.
  3. Run the viscosity_curve_v3.py script to generate viscosity curves at a specified temperature.

Inputs (adjust as needed):
  BARREL_DIAMETER_MM = 120
  BARREL_LENGTH_MM = 1880
  L_OVER_D = 15.6
  MOTOR_POWER_HP = 25
  GEARBOX_RATIO = 6.2
  VISCOSITY_TEMPERATURE_C = 195

Outputs:
  - Screw design DataFrame via Streamlit-acetools (displayed)
  - Extruder motor sizing results printed to console
  - Viscosity curve PNGs and CSV generated by viscosity_curve_v3.py
"""
import os
import sys
import subprocess
import importlib.util
import screw_design  # Imports and runs screw_design.py, which computes Q_kg_hr
#import viscosity_curve_v3
# ──────────────────────────────────────────────────────────────────────────────
# 1. INPUT PARAMETERS
# ──────────────────────────────────────────────────────────────────────────────
# Extruder and screw parameters (edit as needed)
BARREL_DIAMETER_MM = 120.0    # [mm]
BARREL_LENGTH_MM = 1880.0     # [mm]
L_OVER_D = 15.6               # Barrel length divided by diameter
MOTOR_POWER_HP = 25.0         # [hp]
GEARBOX_RATIO = 6.2           # Reduction ratio

# Viscosity analysis
VISCOSITY_TEMPERATURE_C = 195.0  # [°C]

# ──────────────────────────────────────────────────────────────────────────────
# 2. SCREW DESIGN: Retrieve throughput from screw_design module
# ──────────────────────────────────────────────────────────────────────────────
# When screw_design.py is imported, it runs its core calculations and displays a DataFrame.
# It also defines Q_kg_hr as the estimated throughput in kg/h.

try:
    throughput_kg_hr = screw_design.Q_kg_hr
    print(f"[INFO] Estimated throughput from screw_design: {throughput_kg_hr:.0f} kg/h")
except AttributeError:
    print("[ERROR] Cannot access Q_kg_hr from screw_design module. Ensure screw_design.py defines Q_kg_hr at top level.")
    sys.exit(1)

# ──────────────────────────────────────────────────────────────────────────────
# 3. EXTRUDER MOTOR SIZING: Dynamically load "extruder design.py"
# ──────────────────────────────────────────────────────────────────────────────
# File name contains a space, so use importlib to load as module "extruder_design"
EXTRUDER_DESIGN_PATH = os.path.join(os.path.dirname(__file__), "extruder design.py")
module_name = "extruder_design"

spec = importlib.util.spec_from_file_location(module_name, EXTRUDER_DESIGN_PATH)
if spec is None:
    print(f"[ERROR] Could not find file: {EXTRUDER_DESIGN_PATH}")
    sys.exit(1)

extruder_design = importlib.util.module_from_spec(spec)
spec.loader.exec_module(extruder_design)

# Convert throughput and other parameters for motor sizing
# screw_motor_calc expects: throughput_kg_h, melt_density_kg_m3, kv, screw_rpm, specific_torque, safety_factor
# We will use defaults for melt_density, kv, screw_rpm, specific_torque, safety_factor.

sizing_result = extruder_design.screw_motor_calc(
    throughput_kg_h=throughput_kg_hr,
    # User can override defaults here if desired:
    # melt_density_kg_m3=1500,
    # kv=0.045,
    # screw_rpm=80,
    # specific_torque_Nm_cm3=12,
    # safety_factor=1.15
)

print("\n[Extruder Motor Sizing] Results:")
print(f"  Required screw diameter: {sizing_result['required_diameter_mm']} mm")
print(f"  Shaft torque: {sizing_result['shaft_torque_Nm']} N·m")
print(f"  Motor power: {sizing_result['motor_power_kW']} kW")

# Compare with provided motor power (hp → kW)
kW_per_hp = 0.7457
provided_power_kW = MOTOR_POWER_HP * kW_per_hp
print(f"  Provided motor power: {MOTOR_POWER_HP:.1f} hp ({provided_power_kW:.1f} kW)")

if provided_power_kW >= sizing_result['motor_power_kW']:
    print("  [OK] Provided motor is sufficient for estimated torque and power requirements.")
else:
    print("  [WARNING] Provided motor power may be insufficient; consider upsizing.")

# ──────────────────────────────────────────────────────────────────────────────
# 4. VISCOSITY CURVE GENERATION: Call viscosity_curve_v3.py via subprocess
# ──────────────────────────────────────────────────────────────────────────────
# This will generate:
#   • PE_viscosity_<T>C.png
#   • SPC_prediction_<T>C.png
#   • PE_SPC_viscosity_<T>C.csv

print(f"\n[INFO] Generating viscosity curves at {VISCOSITY_TEMPERATURE_C:.0f} °C...")
try:
    subprocess.run([sys.executable, "rheological_utils.py", "--T", str(VISCOSITY_TEMPERATURE_C)], check=True)
    print("  [OK] Viscosity curves and data have been generated.")
except subprocess.CalledProcessError as e:
    print(f"  [ERROR] Viscosity script failed with return code {e.returncode}.")

# ──────────────────────────────────────────────────────────────────────────────
# End of main_extruder_integration.py
# ──────────────────────────────────────────────────────────────────────────────
